use sakila;

-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1. List the number of films per category.
SELECT c.name, COUNT(*)  FROM sakila.film_category AS f
JOIN sakila.category AS c
ON f.category_id = c.category_id
GROUP BY c.name;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country FROM sakila.store AS s
JOIN sakila.address AS a
ON s.address_id = a.address_id
JOIN sakila.city AS c
ON a.city_id = c.city_id
JOIN sakila.country AS co
ON c.country_id = co.country_id;


-- 3. Calculate the total revenue generated by each store in dollars.
SELECT sto.store_id, SUM(amount) FROM sakila.payment AS p
JOIN sakila.staff AS sta
ON p.staff_id = sta.staff_id
JOIN sakila.store AS sto
ON sta.store_id = sta.store_id
GROUP BY store_id;

-- 4. Determine the average running time of films for each category.
SELECT c.name, AVG(fi.length)  FROM sakila.film_category AS f
JOIN sakila.category AS c
ON f.category_id = c.category_id
JOIN sakila.film AS fi
ON f.film_id = fi.film_id
GROUP BY c.name;

-- Bonus:

-- 5. Identify the film categories with the longest average running time.
SELECT c.name, AVG(fi.length)  FROM sakila.film_category AS f
JOIN sakila.category AS c
ON f.category_id = c.category_id
JOIN sakila.film AS fi
ON f.film_id = fi.film_id
GROUP BY c.name
ORDER BY AVG(fi.length) DESC
LIMIT 1;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(*) FROM sakila.rental AS r
JOIN sakila.inventory AS i
ON r.inventory_id = i.inventory_id
JOIN sakila.film as f
ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY COUNT(*) DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT title, store_id FROM sakila.rental AS r
JOIN sakila.inventory AS i
ON r.inventory_id = i.inventory_id
JOIN sakila.film as f
ON i.film_id = f.film_id
WHERE title='ACADEMY DINOSAUR';

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory.
SELECT f.title, COUNT(i.inventory_id) AS Availability FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i
ON f.film_id = i.film_id
GROUP BY f.title;

-- 9. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT f.title, COUNT(i.inventory_id) AS Inventory,
CASE 
    WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
    ELSE 'Not Available'
END AS 'Availability'
FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i
ON f.film_id = i.film_id
GROUP BY f.title;